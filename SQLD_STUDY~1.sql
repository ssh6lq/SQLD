--3일차

--함수
--내장형함수, 사용자정의함수
--내장 함수: 단일행 함수, 다중행 함수
--단일행 함수: 문자형, 숫자형, 날짜형, 형변환, NULL 관련 함수

--문자형 함수
SELECT 'aBC' FROM DUAL;
SELECT UPPER('aBC') FROM DUAL;
SELECT LOWER('aBC') FROM DUAL;
SELECT ENAME, LOWER(ENAME) FROM EMP;
SELECT INITCAP('aBC') FROM DUAL; --첫번째만 대문자
SELECT INITCAP (ENAME) FROM EMP;
SELECT INITCAP ENAME FROM EMP; --(X)
SELECT ASCII('A') FROM DUAL;
SELECT ASCII('a') FROM DUAL;
SELECT ASCII(' ') FROM DUAL;
SELECT ASCII('!') FROM DUAL;
SELECT ASCII('?') FROM DUAL;
SELECT CHR(63) FROM DUAL;

--'AB'+'CD'
SELECT 'AB'+'CD' FROM DUAL; --(X)
SELECT CONCAT ('AB','CD') FROM DUAL; --문자열 더하기
SELECT CONCAT('12','CD') FROM DUAL;
SELECT CONCAT(12,'CD') FROM DUAL;
--'AB'+'CD'+'ED'
SELECT CONCAT('AB','CD','ED') FROM DUAL; --(X)
SELECT CONCAT(CONCAT('AB','CD'),'EF') FROM DUAL;
SELECT CONCAT (ENAME, EMPNO) FROM EMP;
SELECT CONCAT(INITCAP(ENAME), EMPNO) FROM EMP;
SELECT LENGTH ('ABCD') FROM DUAL;
SELECT LENGTH ('  ABCD  ') FROM DUAL;

SELECT ENAME, LENGTH(ENAME) FROM EMP;
SELECT SUBSTR('ABCDEF') FROM DUAL; -- (X)
SELECT SUBSTR('ABCEDF',1) FROM DUAL;
SELECT SUBSTR('ABCEDF',2) FROM DUAL;

SELECT ENAME, SUBSTR (ENAME,1,1) FROM EMP;
SELECT ENAME, LOWER (SUBSTR(ENAME,1,1)) FROM EMP;

--TRIM
SELECT LTRIM('ABCE','A') FROM DUAL;
SELECT LTRIM('ABCDE','A') FROM DUAL;
SELECT LTRIM('AABCD','A') FROM DUAL;
SELECT LTRIM('ABACD','A') FROM DUAL;
SELECT LENGTH(LTRIM('A ABCD','A')) FROM DUAL;
SELECT LTRIM('ABCD','AB') FROM DUAL;
SELECT LTRIM('AABBCD','AB') FROM DUAL; -- 'AB' -> 'A' OR 'B'

--SELECT LTRIM('AABBCD','A',B') FROM DUAL;  -- (X)
SELECT LTRIM('ABCD') FROM DUAL;
SELECT LTRIM(' ABCD') FROM DUAL; -- space 제거

--날짜형 함수
SELECT SYSDATE FROM DUAL;
SELECT SYSDATE-1, SYSDATE, SYSDATE+1 FROM DUAL;
SELECT SYSDATE, EXTRACT(YEAR FROM SYSDATE) FROM DUAL;
SELECT SYSDATE, EXTRACT(DAY FROM SYSDATE) FROM DUAL;

--입사년도가 1981년인 사원중 SAL이 1500이상인 사원의 EMPNO, ENAME, SAL, HIREDATE

SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP
WHERE HEREDATE>'81/01/01' AND HIREDATE<='81/12/31' AND SAL>=1500;

SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP
WHERE HIREDATE>='81/01/01' AND HIREDATE<='81/12/31' AND SAL >=1500;

SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP
WHERE EXTRACT(YEAR FROM HIREDATE) = 1981 AND SAL>=1500; -- 1981대신 81만 넣으면 안됨

--숫자형 함수
--절대값, 나머지, 반올림, 올림, 버림

--절대 값:ABS

SELECT 10, ABS(10), ABS(-10), ABS(10.7), ABS(-10.7) FROM DUAL;

--SIGN
SELECT SIGN(10), SIGN(-10), SIGN(0.1234) FROM DUAL;

--나머지
SELECT 5/2, MOD(5,2), MOD(4,2) FROM DUAL; --나머지는 MOD
SELECT ENAME, SAL, MOD(SAL,100) FROM EMP;

--올림, 버림, 반ㅇ로림
--CEIL, FLOOR, ROUND, TRUNC

--FLOOR 버림
-- 소수 첫째자리에서 버림
--해당 숫자보다 작은 정수 중에서 가장 큰 정수
SELECT FLOOR(10), FLOOR(10.5), FLOOR(12.745) FROM DUAL;

-- -10.5 = 10+0.5
-- -12.345 = -12 + (-0.345) --> -12 + (-0.345) -1 = -13 + 0.655

--TRUNC(VALUE, 표시자리수(DEFAULT =0 )
--버림(자리 수 선택 가능)

SELECT TRUNC(12.876), TRUNC(12.345) FROM DUAL;
SELECT TRUNC(12.876,1), TRUNC(12.345,1) FROM DUAL;
SELECT TRUNC(12.876,2), TRUNC(12.345,2) FROM DUAL;

--1. SAL 1500이상인 사원의 SAL을 15% 인상. 단. 소수점 이하는 버린다
SELECT EMPNO, ENAME, SAL, SAL*1.15, FLOOR(SAL*1.15), TRUNC(SAL*1.15) FROM EMP;
--2. SAL가 2000 이하인 사원들의 SAL을 20% 인상. 단10의 자리에서 반올림
SELECT EMPNO, ENAME, SAL, SAL*1.2, ROUND(SAL*1.2,-2) FROM EMP;
--3. 모든 사원의 SAL에서 10의 자리 이하 버림
SELECT EMPNO, ENAME, SAL, TRUNC(SAL,-2) FROM EMP;

--형 변환 함수
-- 자동형변환, 강제형 변환

SELECT 10+10 FROM DUAL;
SELECT 10+'10' FROM DUAL;--자동형 변환
SELECT '10'+'10' FROM DUAL;--자동형 변환
SELECT '10'+'A' FROM DUAL;--(X)
SELECT 10+'A' FROM DUAL;--(X)
SELECT 10+TO_NUMBER('A') FROM DUAL;--(X)
SELECT 10+ASCII('A') FROM DUAL;
SELECT TO_NUMBER('10')+10 FROM DUAL;-- 강제 형 변환
SELECT TO_CHAR(10)+10 FROM DUAL; --'10': 강제형 변환 --> 10자동형변환
SELECT 10 FROM DUAL;
SELECT 10+10+10, TO_CHAR(10), TO_NUMBER('10')+'10','10'+'10' FROM DUAL;

SELECT SYSDATE FROM DUAL;
SELECT TO_CHAR(SYSDATE,'YYYYMMDD') FROM DUAL;
SELECT ROW_NUMBER(SYSDAYE,'YYYYMMDD') FROM DUAL; --(X)
SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')+10 FROM DUAL; --자동형변환
SELECT TO_CHAR(SYSDATE, 'YYMMDD') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YY/MM/DD') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YY년MM월DD일') FROM DUAL; --(X)
SELECT TO_CHAR(SYSDATE, 'YY-MM/DD.') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD, HH:MI:SS') FROM DUAL;
--3일 3시간 10분후
SELECT SYSDATE, TO_CHAR(SYSDATE+3+1/24*3+1/24/60*10,'YYYY-MM-DD, HH:MI:SS') FROM DUAL;
SELECT SYSDATE, TO_CHAR(SYSDATE+5+1/24*5+1/24/60*20,'YYYY-MM-DD, HH:MI:SS') FROM DUAL;
--NULL
--NVL(ISNULL), NVL2, NULLIF, COALESCE

--NVL(A,B):A가 NULL이 아니면 A, NULL이면 B
--NVL2(A,B,C):A가 NULL이 아니면 B, NULL이면 C

SELECT ENAME, SAL, COMM FROM EMP;
SELECT 10+10 FROM DUAL;
SELECT 10+NULL FROM DUAL;
SELECT ENAME, SAL, COMM, SAL+COMM FROM EMP;

SELECT ENAME, SAL, COMM, SAL+COMM , SAL*NVL(COMM,0), SAL+NVL2(COMM,COMM,0), SAL+NVL2(COMM,100,0) FROM EMP;

--NULLIF(A,B) : A=B면 NULL, A!=B면 A
SELECT NULLIF(3,4), NULLIF(5,5) FROM DUAL;

--COALESCE(A,B,C,D,...) : 앞에서부터 NULL이 아닌 처음 나오는 값을 반환
SELECT COALESCE(NULL,NULL,NULL,1,NULL,2,'A') FROM DUAL; --(X)
SELECT COALESCE(NULL,NULL,NULL,1,NULL,2,3) FROM DUAL;
SELECT COALESCE('C',NULL,NULL,NULL,'A',NULL,'B') FROM DUAL;

--CASE 함수
/*
SELECT <컬럼명1>,<컬럼명2>,...,
CASE 컬럼명(값, 인수,...)
    WHEN 기준값1 THEN 값1 : 컬럼명=기준값1 --> 값1 반환
    WHEN 기준값2 THEN 값2 : 컬럼명=기준값2 --> 값2 반환
    ...
    <ELSE 값 n> : 나머지는 값n
 END
 FROM 테이블명;
 */

-- DEPTNO 10 : 영업1부, 20 : 영업2부, 30 : 영업3부, 


SELECT EMPNO, ENAME, DEPTNO,
CASE DEPTNO
    WHEN 10 THEN '영업1부'
    WHEN 20 THEN '영업2부'
    WHEN 30 THEN '영업3부'
 END
 FROM EMP;
 

SELECT EMPNO, ENAME, DEPTNO,
CASE DEPTNO
    WHEN 10 THEN '영업1부'
    WHEN 20 THEN '영업2부'
    ELSE '영업3부'
 END 부서
 FROM EMP;

SELECT EMPNO, ENAME, DEPTNO,
CASE DEPTNO
    WHEN 10 THEN '영업1부'
    WHEN 20 THEN '영업2부'
 END AS 부서 --부서(한글) ,"" 가능 /''는 불가능
 FROM EMP;

SELECT EMPNO, ENAME, DEPTNO,
CASE 
    WHEN DEPTNO=10 THEN '영업1부'
    WHEN DEPTNO=20 THEN '영업2부'
    WHEN DEPTNO=30 THEN '영업3부'
 END 부서 
 FROM EMP;

--JOB별 SAL 인상, 반올림해서 10의 자리까지 표시
--CLERK, MANAGER:10%
--SALESMAN :20%
--PFRESIDENT, ANALYST:30%

SELECT ENAME, JOB, SAL,
CASE JOB
    WHEN 'CLERK' THEN ROUND(SAL*1.1,-1)
    WHEN 'MANAGER' THEN ROUND(SAL*1.1,-1)
    WHEN 'SALESMAN' THEN ROUND(SAL*1.2,-1)
    WHEN 'PRESIDENT' THEN ROUND(SAL*1.3,-1)
    WHEN 'ANALYST' THEN ROUND(SAL*1.3,-1)
END 급여인상
FROM EMP;

SELECT ENAME, JOB, SAL,
CASE JOB
    WHEN 'CLERK' OR 'MANAGER' THEN ROUND(SAL*1.1,-1) --콤마로 여러개 안됨/OR안됨/
    WHEN 'SALESMAN' THEN ROUND(SAL*1.2,-1)
    WHEN 'PRESIDENT' THEN ROUND(SAL*1.3,-1)
    WHEN 'ANALYST' THEN ROUND(SAL*1.3,-1)
END 급여인상
FROM EMP;

SELECT ENAME, JOB, SAL,
CASE 
    WHEN JOB = 'CLERK' OR JOB='MANAGER' THEN ROUND(SAL*1.1,-1)
    WHEN JOB = 'SALESMAN' THEN ROUND(SAL*1.2,-1)
    WHEN JOB = 'PRESIDENT' OR JOB = 'ANALYST' THEN ROUND(SAL*1.3,-1)
END 급여인상
FROM EMP;

--DECODE:CASE문과 동일 윛
--DECODE(표현식(컬럼명,값,인수),기준값1,값1,기준값2,값2,.......,<DEFAULT값>)

--DEPTNO 10:영업 1부, 20:영업2부, 30:영업3부

SELECT ENAME,JOB,SAL,
DECODE(DEPTNO,10,'영업1부',20,'영업2부','영업3부')부서
FROM EMP;

SELECT ENAME,JOB,SAL,
DECODE(DEPTNO,10,'영업1부',20,'영업2부',30,'영업3부')부서
FROM EMP;

--사원들의 급여별 등급 분류
--1500미만:C등급
--1500이상, 3000미만 : B등급
--3000이상:A등급

SELECT ENAME,SAL,
CASE
    WHEN SAL<1500 THEN 'C등급'
    WHEN 1500<=SAL AND SAL<3000 THEN 'B등급'
    WHEN SAL>=3000 THEN 'C등급'
END 등급
FROM EMP;

SELECT ENAME,SAL,
CASE
    WHEN SAL<1500 THEN 'C등급'
    WHEN SAL<3000 THEN 'B등급'
    WHEN SAL>=3000 THEN 'C등급'
END 등급
FROM EMP;

SELECT ENAME,SAL
DECODE(SAL,<1500,'C등급')급여등급 FROM EMP;--(X)
DECODE(SAL,SAL<1500,'C등급')급여등급 FROM EMP; --(X) DECODE는 범위에 해당하는 조건 쓸 수없음

-- ENAME이 S로 시작하면 S, A로 시작하면 A 나머지는 X반환
SELECT ENAME FROM EMP WHERE ENAME LIKE 'S%';
SELECT ENAME, SUBSTR(ENAME,1,1) FROM EMP;

SELECT ENAME,
CASE 
    WHEN SUBSTR(ENAME,1,1) = 'S' THEN 'S'
    WHEN SUBSTR(ENAME,1,1) = 'A' THEN 'A'
    ELSE 'X'
END FIRST
FROM EMP;

SELECT ENAME, DECODE(SUBSTR(ENAME,1,1),'S','S','A','A','X')FIRST FROM EMP;

--P.133 집계함수    
--COUNT,SUM,AVG,MAX,MIN
--집계함수에서 NULL은 없는 것으로 간주함
--다중행 -> 단일행

--COUNT
--COUNT(*): NULL과 무관하게 전체행의 갯수 반환
--COUNT(컬럼명): 해당 컬럼의 NULL 제외한 행 갯수 반환
SELECT *FROM EMP;
SELECT COUNT(EMPNO) FROM EMP;
SELECT COUNT(EMPNO), COUNT(*),COUNT(ENAME),COUNT(MGR) FROM EMP;

SELECT COUNT(*), SUM(SAL), AVG(SAL),MAX(SAL),MIN(SAL) FROM EMP;

--SAL이 1500이상인 사원들의 수, 급여합계, 평균급여, 최대급여, 최소급여
SELECT COUNT(*), SUM(SAL), AVG(SAL), MAX(SAL), MIN(SAL) FROM EMP WHERE SAL>=1500;

CREATE TABLE TEST5(
    COL1 NUMBER(10), COL2 NUMBER(10),
    COL3 NUMBER(10), COL4 NUMBER(10)
);

SELECT *FROM TEST5;
INSERT INTO TEST5 VALUES(30, NULL, 20, NULL);
INSERT INTO TEST5 VALUES(NULL,40,40,NULL);
INSERT INTO TEST5 VALUES(0,10,NULL,NULL);

SELECT *FROM TEST5;
SELECT COUNT(COL1),COUNT(COL2),COUNT(COL3),COUNT(COL4) FROM TEST5;
SELECT COL1+COL2 FROM TEST5;
SELECT SUM(COL1+COL2) FROM TEST5; --집계
SELECT SUM(COL1)+SUM(COL2) FROM TEST5;
SELECT SUM(COL1), SUM(COL2), SUM(COL1)+SUM(COL2)FROM TEST5;
SELECT AVG(COL1),AVG(COL4) FROM TEST5;

--10번 부서에서 근무하는 사원들의 수, 급여합계, 평균 급여
SELECT COUNT(*), SUM(SAL), ROUND(AVG(SAL)) FROM EMP WHERE DEPTNO=10;
SELECT COUNT(*), SUM(SAL), AVG(SAL) FROM EMP WHERE DEPTNO=20;
SELECT *FROM EMP;

SELECT COUNT(*), SUM(SAL), ROUND(AVG(SAL)),DEPTNO 
FROM EMP 
GROUP BY DEPTNO;

SELECT DEPTNO, COUNT(*), SUM(SAL), ROUND(AVG(SAL)) 
FROM EMP 
GROUP BY DEPTNO;

SELECT DEPTNO, COUNT(*), SUM(SAL), ROUND(AVG(SAL)) 
FROM EMP 
GROUP BY DEPTNO
ORDER BY DEPTNO ASC;--오름차순(ASC) 생략 가능

SELECT DEPTNO, COUNT(*), SUM(SAL), ROUND(AVG(SAL)) 
FROM EMP 
GROUP BY DEPTNO
ORDER BY DEPTNO DESC;

--SQL 작성순서:SELECT/FROM/WHERE/GROUP BY/HAVING/ORDER BY
--SQL 실행순서:FROM/WHERE/GROUP BY/HAVING/SELECT/ORDER BY

SELECT DEPTNO, COUNT(*), SUM(SAL), ROUND(AVG(SAL)) 
FROM EMP 
GROUP BY DEPTNO
HAVING COUNT(*)>=5 -- GROUP BY 의 조건절
ORDER BY DEPTNO DESC;

--WHERE: FROM의 조건절
--HAVING: GROUP BY 의 조건절
--집계함수의 사용 가능 위치: HAVING, SELECT, ORDER BY

SELECT COUNT(*) FROM EMP;
SELECT SUM(SAL) FROM EMP;
SELECT SAL, SUM(SAL) FROM EMP; --(X) 

SELECT DEPTNO, COUNT(*), SUM(SAL), ROUND(AVG(SAL)) 
FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO;

SELECT DEPTNO, SAL, COUNT(*), SUM(SAL), ROUND(AVG(SAL)) 
FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO;--(X)

SELECT DEPTNO, COUNT(*), SUM(SAL), ROUND(AVG(SAL)) 
FROM EMP
GROUP BY DEPTNO
ORDER BY MAX(SAL);

--JOB이 CLERK인 사원들에 대해서 각 부서별로 그룹화
--부서원 최소 SAL이 1000이하인 부서에서 사원들의 SAL 총합
--DEPTNO 오름차순 정렬

SELECT DEPTNO, SUM(SAL)
FROM EMP
WHERE JOB='CLERK'
GROUP BY DEPTNO
HAVING MIN(SAL)<=1000
ORDER BY DEPTNO;

-- SAL이 1500이상인 사원들에 대해 부서별 그룹화
-- 부서원의 최소 SAL이 2000이상, 최대 SAL이 3000이하
-- 부서에서 직원들의 평균 SAL(소수첫째자리까지 표시)
-- 평균 SAL 내림차순 정렬

SELECT DEPTNO, ROUND(AVG(SAL),1), MIN(SAL), MAX(SAL)
FROM EMP
WHERE SAL>=1500
GROUP BY DEPTNO
HAVING MIN(SAL)>=2000 AND MAX(SAL)<=3000
ORDER BY AVG(SAL) DESC;

--ORDER BY 절

SELECT *FROM EMP;
SELECT *FROM EMP ORDER BY SAL;
SELECT *
FROM EMP 
ORDER BY SAL, ENAME;

SELECT *FROM EMP;
SELECT *FROM EMP ORDER BY SAL;

SELECT *
FROM EMP 
ORDER BY SAL DESC, ENAME DESC;

SELECT DEPTNO D, COUNT(*) C, SUM(SAL) S
FROM EMP
GROUP BY DEPTNO
ORDER BY D;

SELECT EMPNO EM, ENAME EN, SAL S, COMM C, DEPTNO D
FROM EMP
ORDER BY 3, D, EN;

SELECT EMPNO, ENAME
FROM EMP
ORDER BY SAL;

SELECT DEPTNO, COUNT(*), SUM(SAL)
FROM EMP
GROUP BY DEPTNO
ORDER BY MAX(SAL);

SELECT SAL, COMM
FROM EMP
ORDER BY COMM DESC;

SELECT SAL, COMM
FROM EMP 
ORDER BY COMM DESC NULLS LAST;

SELECT SAL, COMM
FROM EMP
ORDER BY COMM NULLS FIRST, SAL;

--TCL

CREATE TABLE TEST7(A NUMBER(10), B NUMBER(10));
SELECT *FROM TEST7;
SELECT *FROM TEST8;
INSERT INTO TEST7 VALUES(11,12);
INSERT INTO TEST7 VALUES(21,22);
COMMIT;

INSERT INTO TEST7 VALUES(31,32);
SAVEPOINT SP1;
INSERT INTO TEST7 VALUES(41,42);
SAVEPOINT SP2;
SAVEPOINT SP1;
INSERT INTO TEST7 VALUES(51,52);
ROLLBACK; --마지막 커밋된 저장소까지 돌아감
SELECT *FROM TEST7;
ROLLBACK TO SP1;
ROLLBACK TO SP2;

CREATE TABLE DEPT
        (DEPTNO NUMBER(2),
        DNAME VARCHAR2(14),
        LOC VARCHAR2(13));
        
INSERT INTO DEPT VALUES(10, 'ACCOUNTING', 'NEW YORK');        
INSERT INTO DEPT VALUES(20, 'RESEARCH', 'DALLAS'); 
INSERT INTO DEPT VALUES(30, 'SALES', 'CHICAGO'); 
INSERT INTO DEPT VALUES(40, 'OPERATIONS', 'BOSTON'); 

SELECT *FROM DEPT;

CREATE TABLE SALGRADE
        (GRADE NUMBER,
         LOSAL NUMBER,
         HISAL NUMBER);
         
INSERT INTO SALGRADE VALUES(1,700,1200);         
INSERT INTO SALGRADE VALUES(2,1201,1400);    
INSERT INTO SALGRADE VALUES(3,1401,2000);    
INSERT INTO SALGRADE VALUES(4,2001,3000);    
INSERT INTO SALGRADE VALUES(5,3001,9999);    
SELECT *FROM SALGRADE;




