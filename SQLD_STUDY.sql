-- 2일차
/*
안녕하세요
2일차 입니다
*/

--2일차
--입니다.

--DDL : CREATE, ALTER, DROP, RENAME, TRUNCATE
--DML : SELECT, INSERT, DELETE, UPDATE
--DCL : GRANT, REVOKE
--TCD : COMMIT, SAVEPOINT, ROLLBACK

-- DDL
--CREATE(테이블 생성)
--CREATE TABLE 테이블명(컬럼명1 자료형(크기), 컬럼명2 자료형(크기),...);
-- TEST1 : A 숫자 10, B 문자 10, C 숫자 10

CREATE TABLE TEST1(A NUMBER(10), B VARCHAR2(10), C NUMBER(10));
CREATE TABLE TEST2
(
    A NUMBER(10), 
    B VARCHAR2(10), 
    C NUMBER(10)
);

-- SELECT
-- SELECT 컬럼명1, 컬럼명2, ... FROM 테이블명;

SELECT A FROM TEST1;
SELECT A,B FROM TEST1;
SELECT A,B,C FROM TEST1;
SELECT * FROM TEST1;
SELECT C,B,A FROM TEST1;
SELECT A,A FROM TEST1;
SELECT a,b FROM test1;
SELECT b, a FROM test1;

--DROP : TABLE 삭제
--DROP TABLE 테이블 명;

DROP TABLE TEST2;
SELECT * FROM TEST2;

--ALTER: 컬럼 추가, 삭제, 자료형(크기), 이름변경
ALTER TABLE TEST1 ADD(D NUMBER(10));
SELECT * FROM TEST1;

--E:숫자(10), F:문자(10)
ALTER TABLE TEST1 ADD(E NUMBER(10), F VARCHAR2(10));
ALTER TABLE TEST1 ADD(E NUMBER(10));
ALTER TABLE TEST1 ADD(F VARCHAR2(10));
SELECT * FROM TEST1;

--컬럼 삭제
--ALTER TABLE 테이블명 DROP ...;

--F 삭제
ALTER TABLE TEST1 DROP F;  --(X)
ALTER TABLE TEST1 DROP COLUMN F;
SELECT * FROM TEST1;

--D,E 동시 삭제
ALTER TABLE TEST1 DROP COLUMN D,E; --(X)
ALTER TABLE TEST1 DROP COLUMN D, COLUMN E; --(X)
ALTER TABLE TEST1 DROP COLUMN (D,E); --(X)
ALTER TABLE TEST1 DROP D, E;--(X)
ALTER TABLE TEST1 DROP (D,E);
SELECT * FROM TEST1;

-- B VARCHAR2(10) => NUMBER(10)
ALTER TABLE TEST1 MODIFY (B NUMBER (10));

CREATE TABLE TEST9 (A NUMBER(10), B NUMBER(10));
ALTER TABLE TEST9 RENAME TO TEST11;
RENAME TEST11 TO TEST9;
-- 이름변경
-- 테이블명 변경
--ALTER, RENAME
ALTER TABLE TEST1 RENAME TO TEST2;
SELECT *FROM TEST1;
SELECT *FROM TEST2;
RENAME TEST2 TO TEST1;
SELECT FROM TEST2;

--컬럼명 변경
-- C => D
ALTER TABLE COLUMN C RENAME TO COLUMN D;--(X)
ALTER TABLE TEST1 COLUMN C RENAME TO COLUMN D;--(X)
ALTER TABLE TEST1 RENAME COLUMN C TO COLUMN D; --(X)
ALTER TABLE TEST1 RENAME COLUMN C TO D;
SELECT *FROM TEST1;
RENAME COLUMN D TO COLUMN C;--(X)
ALTER TABLE TEST1 RENAME COLUMN D TO C;
SELECT *FROM TEST1;

-- DDL : CREATE, DROP, ALTER, RENAME, TRUNCATE, MODIFY
-- DML : SELECT, INSERT, DELETE, UPDATE
-- DCL : GRANT, REVOKE
-- TCL : COMMIT, SAVEPOINT, ROLLBACK

--INSERT(DML)
--INSERT INTO 테이블명 VALUES(A값1, B값2, C값3);
-- INSERT INTO 테이블명 VALUES(A,C) VALUES(A값, C값);

INSERT INTO TEST1 VALUES(11,12,13);
SELECT *FROM TEST1;
INSERT INTO TEST1(A,B,C) VALUES(21,22,23);
INSERT INTO TEST1 VALUES(31,33); --(X) 열이 3개인데 2개만 넣으면 오류남
INSERT INTO TEST1 VALUES(31,32,33,34);
INSERT INTO TEST1 (A,C) VALUES (31,33); --특정 열 이름 넣어주면 가능
INSERT INTO TEST1 VALUES(41,42,NULL); --NULL넣어주면 가능
SELECT *FROM TEST1;
INSERT INTO TEST1 VALUES(51,'',53);
INSERT INTO TEST1 VALUES((),62,63); --(X)

ALTER TABLE TEST1 MODIFY(B VARCHAR2(10));

--DELETE: 데이터 삭제
DELETE FROM TEST1;
SELECT *FROM TEST1;

DELETE FROM TEST1;--(O)
DELETE TABLE TEST1;--(X)
DELETE *FROM TEST1;--(X)
DELETE TEST1;--(O)

--TABLE은 DDL에만 사용됨
--WHERE 절을 사용하여 조건절에 해당하는 행만 삭제 가능
DELETE FROM TEST1 WHERE A=11;
SELECT *FROM TEST1;
DELETE FROM TEST1 WHERE C=NULL; --(X) NULL은 알 수 없는 값: C=NULL ->C가 NULL일 때 
DELETE FROM TEST1 WHERE B IS NULL;
DELETE FROM TEST1 WHERE B IS NOT NULL; --B가 NULL이 아닌 행만 삭제해라

--UPDATE
UPDATE FROM TEST1 SET A=1; --(X)
UPDATE TEST1 SET A=1;
SELECT *FROM TEST1;
UPDATE TEST1 SET A=11 WHERE C=53;
UPDATE TEST1 SET A=101 WHERE B IS NOT NULL;
UPDATE TEST1 SET A=21 WHERE C=53;
UPDATE TEST1 SET A=NULL WHERE B=42;
SELECT *FROM TEST1;

-- C=NULL:대입(저장)
-- C IS NULL(IS NOT NULL) --> C가 NULL 일때
-- WHERE절에 여러 개 사용 가능

--VIEW
--기존 테이블 또는 VIEW에서 필요한 컬럼으로만 구성된 테이블의 일종

--CREATE TABLE 테이블명(...);
--CREATE VIEW VIEW명 AS SELECT 컬럼명1, 컬럼명2, ... 테이블명;
-- 테이블: 실제값이 존재, VIEW: 정의만 존재
SELECT *FROM TEST1;
CREATE VIEW V_TEST1 AS SELECT A,B FROM TEST1;
SELECT *FROM V_TEST1;
CREATE VIEW VV_TEST1 AS SELECT A FROM V_TEST1;
SELECT *FROM VV_TEST1;

UPDATE TEST1 SET A=41 WHERE B IS NULL;
UPDATE TEST1 SET A=41 WHERE B = 72;

CREATE TABLE TEST3
(
    A NUMBER(10) PRIMARY KEY,
    B NUMBER(10) NOT NULL,
    C NUMBER(10)
);

SELECT *FROM TEST3;
INSERT INTO TEST3 VALUES(11,12,13);
INSERT INTO TEST3 VALUES(21,22,NULL);
INSERT INTO TEST3(A,B) VALUES(31,23);
INSERT INTO TEST3 VALUES(41,NULL,43); --(X)NOT NULL 설정해뒀기 때문에 NULL값 안됨
INSERT INTO TEST3 (A,C) VALUES(41,43); -- NOT NULL 이기 때문에 안됨
INSERT INTO TEST3 VALUES (NULL,42,43); --(X) A가 PRIMARY KEY이므로 NULL값 넣을 수 없음
--PRIMARY KEY(NOT NULL, 중복 키 안됨
INSERT INTO TEST3 VALUES(41,12,13);
INSERT INTO TEST3 VALUES(11,12,13); --(X) 무결성 제약 조건 위배됨 : PRIMARY KEY

-- 연산자

--비교, 부정비교, 논리, SQL, 부정 SQL
--비교: =, >, <, >=, <=
--부정 비교: !=, =^, <>, NOT 컬럼명=, NOT 컬럼명>(<,>=,<=)
--논리 : AND, OR, NOT
-- SQL : IS NULL, IN(=OR), BETWEEN A AND B, LIKE '비교문자열'(%,_)
-- 부정 SQL: IS NOT NULL, NOT IN, NOT BETWEEN A AND B, 

CREATE TABLE TEST4(
    A NUMBER(10), 
    B VARCHAR2 (10),
    C NUMBER(10)
);
SELECT *FROM TEST4;

INSERT INTO TEST4 VALUES(11,A,13); --(X)
INSERT INTO TEST4 VALUES(11,"A",14); --(X)
INSERT INTO TEST4 VALUES(11,'A',13);
INSERT INTO TEST4 VALUES(21,'B',NULL);
INSERT INTO TEST4 VALUES(31,'C',33);

SELECT*FROM TEST4 WHERE A>=20;
SELECT A FROM TEST4 WHERE A>=20;
SELECT A
FROM TEST4
WHERE A>=20;
--작성순서: SELECT/FROM/WHERE/GROUP BY/HAVING/ORDER BY
--실행순서: FROM/WHERE/GROUP BY/HAVING/SELECT/ORDER BY

SELECT *FROM TEST4;
SELECT *FROM TEST4 WHERE A>=20;
SELECT *FROM TEST4 WHERE C>=20;
SELECT *FROM TEST4 WHERE C<20;
SELECT *FROM TEST4 WHERE NOT C>=20;
SELECT *FROM TEST4 WHERE C IS NULL;
SELECT *FROM TEST4 WHERE A=11;
SELECT *FROM TEST4 WHERE A!=11;
SELECT *FROM TEST4 WHERE A^=11;
SELECT *FROM TEST4 WHERE A<>11;
SELECT *FROM TEST4 WHERE NOT A=11;

SELECT *FROM TEST4 WHERE A>=20 AND A<=30;
--(NOT A>=10) AND A<=30 --> A<10 AND A<=30
--우선순위 때문에 결과가 달라질 수 있음
--연산자 우선순위 : (), NOT, AND, OR

SELECT *FROM TEST4;
SELECT *FROM TEST4 WHERE A=11 OR A=31;
SELECT *FROM TEST4 WHERE A IN(11,31);
SELECT *FROM TEST4 WHERE A IN(11,21,31);
SELECT *FROM TEST4 WHERE A=11 OR C=13;
SELECT *FROM TEST4 WHERE A=11 AND C=13;
SELECT *FROM TEST4 WHERE A,C IN(11,13);-- 실행 안됨
SELECT *FROM TEST4 WHERE (A,C) IN(11,13);--실행 안됨
SELECT *FROM TEST4 WHERE (A,C) IN ((11,13)); --괄호 두번
SELECT *FROM TEST4 WHERE (A,C) IN((11,13),(21,NULL)); --C=NULL 실행 안됨
SELECT *FROM TEST4 WHERE (A,C) IN((11,13),(21,IS NULL)); --실행 안됨

SELECT *FROM TEST4 WHERE A IN(11,31);
SELECT *FROM TEST4 WHERE A NOT IN (11,31);
-- NOT (A=11 OR A=31) -> NOT A=11 AND NOT A=31 -> A!=11 AND A!=31 -> (21,31_ AND (11,21) -> 21
-- NOT IN(A,B) -> NOT A AND NOT B

SELECT *FROM TEST4;
SELECT *FROM TEST4 WHERE C IN(13);
SELECT *FROM TEST4 WHERE C IN(13, NULL);
-- C=13 OR C=NULL -> C=13

SELECT *FROM TEST4 WHERE C NOT IN(13);
SELECT *FROM TEST4 WHERE C NOT IN (13,NULL);
-- NOT(C=13 OR C=NULL)-> NOT C=13 AND NOT C=NULL -> C!=13 AND C!=NULL -> (31) AND X -> X

SELECT *FROM TEST4 WHERE C!=13;

--A IN(13,NULL) --> NULL은 생략 후 연산(NULL은 없는 것으로 간주)
--A NOT IN(13,NULL) --> 항상 실행결과 없음

CREATE TABLE EMP
    (EMPNO NUMBER (4) NOT NULL,
    ENAME VARCHAR2(10),
    JOB VARCHAR2 (9), 
    MGR NUMBER (4),
    HIREDATE DATE,
    SAL NUMBER(7, 2),
    COMM NUMBER (7, 2),
    DEPTNO NUMBER (2));

SELECT *FROM EMP;
DELETE FROM EMP;

INSERT INTO EMP VALUES
    (7369, 'SMITH','CLERK',7902,
    TO_DATE('17-12-1980', 'DD-MM-YYYY'), 800, NULL, 20);
INSERT INTO EMP VALUES
(7499, 'ALLEN', 'SALESMAN', 7698,
    TO_DATE('20-02-1981', 'DD-MM-YYYY'), 1600, 300, 30);
INSERT INTO EMP VALUES
    (7521, 'WARD', 'SALESMAN', 7698,
    TO_DATE('22-02-1981', 'DD-MM-YYYY'), 1250, 500, 30);
INSERT INTO EMP VALUES
    (7566, 'JONES', 'MANAGER', 7839,
    TO_DATE('2-04-1981', 'DD-MM-YYYY'), 2975, NULL, 20);
INSERT INTO EMP VALUES
    (7654, 'MARTIN', 'SALESMAN', 7698,
    TO_DATE('28-09-1981', 'DD-MM-YYYY'), 1250, 1400, 30);
INSERT INTO EMP VALUES
    (7698, 'BLAKE','MANAGER', 7839,
    TO_DATE('1-05-1981', 'DD-MM-YYYY'), 2850, NULL, 30);
INSERT INTO EMP VALUES
    (7782, 'CLARK', 'MANAGER', 7839,
    TO_DATE('9-06-1981', 'DD-MM-YYYY'), 2450, NULL, 10);
INSERT INTO EMP VALUES
    (7788, 'SCOTT', 'ANALYST', 7566,
    TO_DATE('09-12-1982', 'DD-MM-YYYY'), 3000, NULL, 20);
INSERT INTO EMP VALUES
    (7839, 'KING', 'PRESIDENT', NULL,
    TO_DATE('17-11-1981', 'DD-MM-YYYY'), 5000, NULL, 10);
INSERT INTO EMP VALUES
    (7844, 'TURNER', 'SALESMAN', 7698,
    TO_DATE('8-09-1981', 'DD-MM-YYYY'), 1500, 0, 30);
INSERT INTO EMP VALUES
    (7876, 'ADAMS', 'CLERK', 7788,
    TO_DATE('12-01-1983', 'DD-MM-YYYY'), 1100, NULL, 20);
INSERT INTO EMP VALUES
    (7900, 'JAMES', 'CLERK',7698,
    TO_DATE('3-12-1981', 'DD-MM-YYYY'), 950, NULL, 30);
INSERT INTO EMP VALUES
    (7902, 'FORD', 'ANALYST', 7566,
    TO_DATE('3-12-1981', 'DD-MM-YYYY'), 3000, NULL, 20);
INSERT INTO EMP VALUES
    (7934, 'MILLER', 'CLERK', 7782,
    TO_DATE('23-01-1982', 'DD-MM-YYYY'), 1300, NULL, 10);

SELECT *FROM EMP;
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL>=2000;

--1. EXP에서 DEPTNO가 20이 아닌 사원들의 EMPNO, ENAME, DEPTNO
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE DEPTNO != 20;
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE DEPTNO ^= 20;
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE DEPTNO <> 20;
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE NOT DEPTNO != 20;

--2. SAL이 3000이상인 사원들의 EMPNO, ENAE, SAL
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL >=3000;
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL <3000;

--3. ENAME이 ADAMS인 사원의 EMPNO, JOB, SAL
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE ENAME='ADAMS';
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE ENAME=ADAMS; --(X)
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE ENAME="ADAMS"; --(X)
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE ENAME='adms'; --(맞는 결과 나오지 않음) VALUE는 대 소문자 구분함
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE ENAME='ADAMS';

--4. 20번 부서에서 근무하고 있는 사원 중에 SAL이 1500이상인 사원의 EMPNO, ENAME, DEPTNO, SAL
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE DEPTNO=20;
--5. SAL이 2000보다 크거나 1000보다 작은 사원의 EMPNO, ENAME, SAL
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL>2000 OR SAL<1000;
SELECT EMPNO, ENAME, SAL FROM EMP WHERE NOT (SAL<=2000 AND SAL>=1000);
SELECT EMPNO, ENAME, SAL FROM EMP WHERE NOT SAL BETWEEN 1000 AND 2000;
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL NOT BETWEEN 1000 AND 2000;

--6. JOB이 CLERK, SALESMAN, ANAYST인 사원의 EMPNO, ENAME, JOB
SELECT EMPNO, ENAME, JOB FROM EMP WHERE JOB='CLERK' OR JOB='SALESMAN' OR JOB='ANALYST';
SELECT EMPNO, ENAME, JOB FROM EMP WHERE JOB IN('CLERK','SALESMAN','ANALYST');


SELECT *FROM EMP;

--7. 1982년 1월 1일 이후에 입사한 사원의 EMPNO, ENAME, HIREDATE
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>1982년 1월 1일; --(X)
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>1982/01/01; --(X)
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'1982/01/01'; 
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'82/01/01'; 
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'82/1/1'; 
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'2082/01/01'; 
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'1982-01-01'; 
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'1982/01-01'; 
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'1982.01.01'; 
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'1982,01,01'; 
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>'1982년01월01일'; 

--8. 입사년도가 1981년인 사원중 SAL이 1500이상인 사원의 EMPNO, ENAME, SAL, HIREDATE
SELECT EMPNO, ENAME, SAL, HIREDATE 
FROM EMP 
WHERE (HIREDATE = '1981') AND (SAL >1500);

SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP WHERE SAL>=1500;
SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP 
WHERE SAL>=1500 AND HIREDATE>='1981/01/01' AND HIREDATE<'82-1-1';

-- LIKE 연산자
-- % : 0개 이상의 문자
--_ : 1개 단일 문자

--A로 시작하는 ENAME 
SELECT ENAME FROM EMP;
SELECT ENAME FROM EMP WHERE ENAME LIKE 'A';--(X)
SELECT ENAME FROM EMP WHERE ENAME LIKE 'A%';
SELECT ENAME FROM EMP WHERE ENAME LIKE 'A_';
-- S로 끝나는 ENAME
SELECT ENAME FROM EMP WHERE ENAME LIKE '%S';
--A로 시작하고 S로 끝나는 ENAME
SELECT ENAME FROM EMP WHERE ENAME LIKE 'A%S';
--ENAME에 A가 포함되어 있는 ENAME
SELECT ENAME FROM EMP WHERE ENAME LIKE '%A%';
--ENAME에 A가 두개 포함되어 있는 ENAME
SELECT ENAME FROM EMP WHERE ENAME LIKE'%A%A%';

--두번째 A인 사원의 ENAME
SELECT ENAME FROM EMP WHERE ENAME LIKE ' A%'; --(X)
SELECT ENAME FROM EMP WHERE ENAME LIKE '_A%';

--5글자이면서 두번째가 A인 ENAME
SELECT ENAME FROM EMP WHERE ENAME LIKE '_A___';

--ROWNUM
SELECT *FROM EMP;
SELECT *FROM EMP WHERE ROWNUM=1;
SELECT *FROM EMP WHERE ROWNUM=14; --(X)
SELECT *FROM EMP WHERE ROWNUM=2;
SELECT *FROM EMP WHERE ROWNUM<=2;
SELECT *FROM EMP WHERE ROWNUM=1 OR ROWNUM=2;
SELECT *FROM EMP WHERE ROWNUM<=6 OR ROWNUM=7 OR ROWNUM=8;
SELECT ROWNUM, EMPNO, ENAME, SAL FROM EMP;

--DUAL TABLE 임시의 단위 테이블 
SELECT ENAME FROM EMP;
SELECT 1 FROM EMP;
SELECT A FROM EMP; --(X)
SELECT 'A' FROM EMP;
SELECT 1+1 FROM EMP;
SELECT 1+1 FROM DUAL;
SELECT ENAME FROM DUAL; --(X)
SELECT 'ENAME' FROM DUAL;
SELECT ENAME, EMPNO FROM EMP;
SELECT 1,2 FROM DUAL;


